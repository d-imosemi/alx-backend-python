name: Django Test CI (messaging_app)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  MAINTAINER: crazycoder44
  PYTHON_VERSION: '3.10'
  MYSQL_ROOT_PASSWORD: yourpassword
  MYSQL_DATABASE: test_db

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/messaging_app/messaging_app/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pytest-cov
          if [ -f messaging_app/messaging_app/requirements.txt ]; then
            pip install -r messaging_app/messaging_app/requirements.txt
          fi

      - name: Lint with flake8
        run: |
          flake8 messaging_app/messaging_app/ --count --show-source --statistics

      - name: Wait for MySQL to be ready
        run: |
          for i in {1..15}; do
            mysqladmin ping -h 127.0.0.1 -uroot -p"${{ env.MYSQL_ROOT_PASSWORD }}" >/dev/null 2>&1 && break
            echo "Waiting for MySQL..."
            sleep 2
          done

      - name: Run Tests and Generate Coverage
        env:
          DB_NAME: ${{ env.MYSQL_DATABASE }}
          DB_USER: root
          DB_PASSWORD: ${{ env.MYSQL_ROOT_PASSWORD }}
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
        run: |
          cd messaging_app/messaging_app
          mkdir -p test-reports
          pytest --cov=./ --cov-report=xml:coverage.xml --junitxml=test-reports/results.xml

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: messaging_app/messaging_app/coverage.xml

      - name: Upload Pytest JUnit Report
        uses: actions/upload-artifact@v4
        with:
          name: pytest-junit-report
          path: messaging_app/messaging_app/test-reports/results.xml
